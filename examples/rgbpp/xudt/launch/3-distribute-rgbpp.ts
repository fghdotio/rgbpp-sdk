/* eslint-disable */
import { serializeScript } from '@nervosnetwork/ckb-sdk-utils';
import { BtcAssetsApiError, genBtcBatchTransferCkbVirtualTx, sendRgbppUtxos } from 'rgbpp';
import { RGBPP_TOKEN_INFO } from './0-rgbpp-token-info';
import {
  isMainnet,
  collector,
  btcDataSource,
  btcService,
  CKB_PRIVATE_KEY,
  ckbAddress,
  btcAccount,
  BTC_TESTNET_TYPE,
} from '../../env';
import {
  appendCkbTxWitnesses,
  appendIssuerCellToBtcBatchTransfer,
  buildRgbppLockArgs,
  getXudtTypeScript,
  sendCkbTx,
  updateCkbTxWithRealBtcTxId,
} from 'rgbpp/ckb';
import { saveCkbVirtualTxResult } from '../../shared/utils';
import { signAndSendPsbt } from '../../shared/btc-account';

// Warning: Before runing this file for the first time, please run 2-launch-rgbpp.ts
const distributeRgbppAssetOnBtc = async ({
  susBtcTxId,
  susBtcOutIndexStr,
  xudtTypeArgs,
  receivers,
}: {
  susBtcTxId: string;
  susBtcOutIndexStr: string;
  xudtTypeArgs: string;
  receivers: string;
}) => {
  const susBtcOutIndex = parseInt(susBtcOutIndexStr);
  if (isNaN(susBtcOutIndex)) {
    throw new Error('RGBPP_XUDT_TRANSFER_SUS_BTC_OUT_INDEX is not a number');
  }
  const rgbppXudtReceivers = receivers.split(';').map((receiver) => {
    const [btcAddress, amountStr] = receiver.split(':');
    if (!btcAddress || !amountStr) {
      throw new Error('Invalid receiver format');
    }
    let amount: bigint;
    try {
      amount = BigInt(amountStr);
    } catch (error) {
      throw new Error('RGBPP_XUDT_LAUNCH_AMOUNT is not a number');
    }
    return { toBtcAddress: btcAddress, transferAmount: BigInt(amount) * BigInt(10 ** RGBPP_TOKEN_INFO.decimal) };
  });
  let btcFeeRate: number | undefined;
  if (process.env.RGBPP_BTC_FEE_RATE !== undefined) {
    btcFeeRate = parseInt(process.env.RGBPP_BTC_FEE_RATE);
    if (isNaN(btcFeeRate)) {
      throw new Error('RGBPP_BTC_FEE_RATE is not a number');
    }
  }

  const rgbppLockArgsList = [buildRgbppLockArgs(susBtcOutIndex, susBtcTxId)];

  // Warning: Please replace with your real xUDT type script here
  const xudtType: CKBComponents.Script = {
    ...getXudtTypeScript(isMainnet),
    // The xUDT type script args is generated by 2-launch-rgbpp.ts, and it can be found from the log
    args: xudtTypeArgs,
  };

  const ckbVirtualTxResult = await genBtcBatchTransferCkbVirtualTx({
    collector,
    rgbppLockArgsList,
    xudtTypeBytes: serializeScript(xudtType),
    rgbppReceivers: rgbppXudtReceivers,
    isMainnet,
    btcTestnetType: BTC_TESTNET_TYPE,
  });

  // Save ckbVirtualTxResult
  saveCkbVirtualTxResult(ckbVirtualTxResult, '3-distribute-rgbpp');

  const { commitment, ckbRawTx, sumInputsCapacity, rgbppChangeOutIndex, needPaymasterCell } = ckbVirtualTxResult;

  // The first output utxo is OP_RETURN
  // Rgbpp change utxo position depends on the number of distributions, if 50 addresses are distributed, then the change utxo position is 51
  console.log('RGB++ asset change utxo out index: ', rgbppChangeOutIndex);

  // Send BTC tx
  const psbt = await sendRgbppUtxos({
    ckbVirtualTx: ckbRawTx,
    commitment,
    tos: rgbppXudtReceivers.map((receiver) => receiver.toBtcAddress),
    needPaymaster: needPaymasterCell,
    ckbCollector: collector,
    from: btcAccount.from,
    fromPubkey: btcAccount.fromPubkey,
    source: btcDataSource,
    feeRate: btcFeeRate,
  });

  const { txId: btcTxId, rawTxHex: btcTxBytes } = await signAndSendPsbt(psbt, btcAccount, btcService);
  console.log(`BTC ${BTC_TESTNET_TYPE} TxId: ${btcTxId}`);

  const interval = setInterval(async () => {
    try {
      console.log('Waiting for BTC tx and proof to be ready');
      const rgbppApiSpvProof = await btcService.getRgbppSpvProof(btcTxId, 0);
      clearInterval(interval);
      // Update CKB transaction with the real BTC txId
      const newCkbRawTx = updateCkbTxWithRealBtcTxId({ ckbRawTx, btcTxId, isMainnet });
      const ckbTx = await appendCkbTxWitnesses({
        ckbRawTx: newCkbRawTx,
        btcTxBytes,
        rgbppApiSpvProof,
      });

      const signedTx = await appendIssuerCellToBtcBatchTransfer({
        secp256k1PrivateKey: CKB_PRIVATE_KEY,
        issuerAddress: ckbAddress,
        ckbRawTx: ckbTx,
        collector,
        sumInputsCapacity,
        isMainnet,
      });

      const txHash = await sendCkbTx({ collector, signedTx });
      console.info(`RGB++ Asset has been distributed and CKB tx hash is ${txHash}`);
    } catch (error) {
      if (!(error instanceof BtcAssetsApiError)) {
        console.error(error);
      }
    }
  }, 20 * 1000);
};

// Please use your real BTC UTXO information on the BTC Testnet
// BTC Testnet3: https://mempool.space/testnet
// BTC Signet: https://mempool.space/signet
distributeRgbppAssetOnBtc({
  // Warning: If rgbpp assets are distributed continuously, then the position of the current rgbpp asset utxo depends on the position of the previous change utxo distributed
  susBtcTxId: process.env.RGBPP_XUDT_TRANSFER_SUS_BTC_TX_ID!,
  susBtcOutIndexStr: process.env.RGBPP_XUDT_TRANSFER_SUS_BTC_OUT_INDEX!,
  xudtTypeArgs: process.env.RGBPP_XUDT_TYPE_ARGS!,
  receivers: process.env.RGBPP_XUDT_TRANSFER_RECEIVERS!,
});

/* 
Usage:
RGBPP_XUDT_TRANSFER_SUS_BTC_TX_ID=<btc_tx_id> RGBPP_XUDT_TRANSFER_SUS_BTC_OUT_INDEX=<btc_out_index> RGBPP_XUDT_TYPE_ARGS=<xudt_type_args> RGBPP_XUDT_TRANSFER_RECEIVERS=<btc_address_1:amount_1;btc_address_2:amount_2;...> [RGBPP_BTC_FEE_RATE=<fee_rate>] npx tsx xudt/launch/3-distribute-rgbpp.ts

Example:
RGBPP_XUDT_TRANSFER_SUS_BTC_TX_ID=abc123... RGBPP_XUDT_TRANSFER_SUS_BTC_OUT_INDEX=0 RGBPP_XUDT_TYPE_ARGS=0x12fa123b8a4516ec31ea2871da29a66f4d6d8fbb9e1693f15ad416c1e89eb237 RGBPP_XUDT_TRANSFER_RECEIVERS=tb1qeq...nm85:1000;tb1qeq...nm86:2000 npx tsx xudt/launch/3-distribute-rgbpp.ts 

Note:
- RGBPP_BTC_FEE_RATE is optional, uses default network fee rate if not specified
*/
